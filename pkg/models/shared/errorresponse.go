// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// Type - One of ["invalid_request_error", "authentication_error", "rate_limit_error", "validation_error", "api_error"]
type Type string

const (
	TypeInvalidRequestError Type = "invalid_request_error"
	TypeAuthenticationError Type = "authentication_error"
	TypeRateLimitError      Type = "rate_limit_error"
	TypeValidationError     Type = "validation_error"
	TypeAPIError            Type = "api_error"
)

func (e Type) ToPointer() *Type {
	return &e
}

func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_request_error":
		fallthrough
	case "authentication_error":
		fallthrough
	case "rate_limit_error":
		fallthrough
	case "validation_error":
		fallthrough
	case "api_error":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

type ErrorResponse struct {
	Code    *string `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
	// One of ["invalid_request_error", "authentication_error", "rate_limit_error", "validation_error", "api_error"]
	Type *Type `json:"type,omitempty"`
}

func (o *ErrorResponse) GetCode() *string {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *ErrorResponse) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *ErrorResponse) GetType() *Type {
	if o == nil {
		return nil
	}
	return o.Type
}
